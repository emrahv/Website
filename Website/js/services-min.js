myApp.factory("productService", ["$http", "$filter", function (t, n) { return { getProductDetails: function (n, o) { return t({ method: "GET", url: "/api/Product/Get", params: { language: o, id: n } }).then(function (t) { return t.data }, function (t) { return console.log("Error: Product cannot be found:" + n), {} }) }, getParents: function (n, o) { return t({ method: "GET", url: "/api/Product/GetParents", params: { language: o, id: n } }).then(function (t) { return t.data }, function (t) { console.log("Error: Product parents cannot be found:" + n) }) }, getChildren: function (n, o) { return t({ method: "GET", url: "/api/Product/GetChildren", params: { language: o, id: n } }).then(function (t) { return t.data }, function (t) { console.log("Error: Child products cannot be found for product " + n) }) }, getSections: function (n, o) { return t({ method: "GET", url: "/api/Product/GetSections", params: { id: n, language: o } }).then(function (t) { return t.data }, function (t) { console.log("Error: Product sections cannot be found:" + n) }) }, getProductModels: function (n, o) { return t({ method: "GET", url: "/api/Product/GetModels", params: { language: o, id: n } }).then(function (t) { if (!(t.data.length <= 0)) return t.data }, function (t) { console.log("Error: Cannot get product models") }) }, getProductTree: function (n) { return t({ method: "GET", url: "/api/Product/GetProductTree", params: { language: n, includeBranding: !1 } }).then(function (t) { return t.data }, function (t) { console.log("Error: Product Tree cannot be found.") }) }, getTopLevelProducts: function (n) { return t({ method: "GET", url: "/api/Product/GetTopLevelProducts", params: { language: n } }).then(function (t) { return t.data }, function (t) { console.log("Error: Top LEvel products cannot be found.") }) }, getRelatedProducts: function (n, o) { return t({ method: "GET", url: "/api/Product/GetRelatedProducts", params: { language: o, id: n } }).then(function (t) { return t.data }, function (t) { console.log("Error: Cannot get related products") }) }, getFullProduct: function (n, o) { return t({ method: "GET", url: "/api/Product/GetFullProduct", params: { language: o, id: n } }).then(function (t) { return console.dir(t.data), t.data }, function (t) { return console.log("Error: Full Product cannot be found:" + n), {} }) } } }]), myApp.factory("whiteLabelService", ["$http", "$filter", function (t, n) { return { getBrandDetails: function () { return t({ method: "GET", url: "/api/Localisation/BrandDetails" }).then(function (t) { return t.data }, function (t) { console.log("Error: Brand Details cannot be retrieved") }) }, getOrganisation: function (n) { return t({ method: "GET", url: "/api/Localisation/Organisation", params: { language: n } }).then(function (t) { return t.data }, function (t) { console.log("Error: Organisation info cannot be retrieved") }) } } }]), myApp.factory("pageManagement", ["$http", "$filter", function (t, n) { return { getSection: function (n, o) { return t({ method: "GET", url: "/api/Localisation/Section", params: { language: o, id: n } }).then(function (t) { return t.data }, function (t) { console.log("Error: Section cannot be found:" + $attrs.id) }) }, getOrganisationSections: function (n) { return t({ method: "GET", url: "/api/Localisation/GetOrganisationSections", params: { language: n } }).then(function (t) { return t.data }, function (t) { console.log("Error: Organisation Sections cannot be retrieved") }) }, setTitle: function (t, n) { var o = t; "" !== n && (o += " - " + n), document.title = o }, setAnalytics: function (t) { var n, o, e, r, a; n = window, o = document, e = "ga", n.GoogleAnalyticsObject = e, n.ga = n.ga || function () { (n.ga.q = n.ga.q || []).push(arguments) }, n.ga.l = 1 * new Date, r = o.createElement("script"), a = o.getElementsByTagName("script")[0], r.async = 1, r.src = "//www.google-analytics.com/analytics.js", a.parentNode.insertBefore(r, a), ga("create", t, "auto"), ga("send", "pageview") }, setClassByCount: function (t) { var n = Math.floor(12 / t); return "col-lg-" + n + " col-md-" + n + " col-xs-12" }, setClassByWidth: function (t) { var n; return t && (n = "col-lg-" + t.lg + " col-md-" + t.md + " col-xs-" + t.xs), n } } }]);